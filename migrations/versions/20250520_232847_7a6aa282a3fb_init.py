"""init

Revision ID: 7a6aa282a3fb
Revises: 
Create Date: 2025-05-20 23:28:47.882742

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7a6aa282a3fb'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('memos',
    sa.Column('category', sa.String(length=100), nullable=False),
    sa.Column('title', sa.String(length=200), nullable=False),
    sa.Column('contents', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_memos_category'), 'memos', ['category'], unique=False)
    op.drop_index('dataset_items_created_at_idx', table_name='dataset_items')
    op.drop_index('dataset_items_dataset_id_idx', table_name='dataset_items', postgresql_using='hash')
    op.drop_index('dataset_items_source_observation_id_idx', table_name='dataset_items', postgresql_using='hash')
    op.drop_index('dataset_items_source_trace_id_idx', table_name='dataset_items', postgresql_using='hash')
    op.drop_index('dataset_items_updated_at_idx', table_name='dataset_items')
    op.drop_table('dataset_items')
    op.drop_table('blob_storage_integrations')
    op.drop_table('posthog_integrations')
    op.drop_index('membership_invitations_email_idx', table_name='membership_invitations')
    op.drop_index('membership_invitations_email_org_id_key', table_name='membership_invitations')
    op.drop_index('membership_invitations_id_key', table_name='membership_invitations')
    op.drop_index('membership_invitations_org_id_idx', table_name='membership_invitations')
    op.drop_index('membership_invitations_project_id_idx', table_name='membership_invitations')
    op.drop_table('membership_invitations')
    op.drop_index('trace_media_project_id_trace_id_media_id_field_key', table_name='trace_media')
    op.drop_table('trace_media')
    op.drop_index('prompts_created_at_idx', table_name='prompts')
    op.drop_index('prompts_project_id_id_idx', table_name='prompts')
    op.drop_index('prompts_project_id_name_version_key', table_name='prompts')
    op.drop_index('prompts_tags_idx', table_name='prompts', postgresql_using='gin')
    op.drop_index('prompts_updated_at_idx', table_name='prompts')
    op.drop_table('prompts')
    op.drop_index('projects_org_id_idx', table_name='projects')
    op.drop_table('projects')
    op.drop_index('Account_provider_providerAccountId_key', table_name='Account')
    op.drop_index('Account_user_id_idx', table_name='Account')
    op.drop_table('Account')
    op.drop_index('organization_memberships_org_id_user_id_key', table_name='organization_memberships')
    op.drop_index('organization_memberships_user_id_idx', table_name='organization_memberships')
    op.drop_table('organization_memberships')
    op.drop_index('comments_project_id_object_type_object_id_idx', table_name='comments')
    op.drop_table('comments')
    op.drop_index('batch_exports_project_id_user_id_idx', table_name='batch_exports')
    op.drop_index('batch_exports_status_idx', table_name='batch_exports')
    op.drop_table('batch_exports')
    op.drop_index('traces_created_at_idx', table_name='traces')
    op.drop_index('traces_id_user_id_idx', table_name='traces')
    op.drop_index('traces_name_idx', table_name='traces')
    op.drop_index('traces_project_id_timestamp_idx', table_name='traces')
    op.drop_index('traces_session_id_idx', table_name='traces')
    op.drop_index('traces_tags_idx', table_name='traces', postgresql_using='gin')
    op.drop_index('traces_timestamp_idx', table_name='traces')
    op.drop_index('traces_user_id_idx', table_name='traces')
    op.drop_table('traces')
    op.drop_index('llm_api_keys_id_key', table_name='llm_api_keys')
    op.drop_index('llm_api_keys_project_id_provider_key', table_name='llm_api_keys')
    op.drop_table('llm_api_keys')
    op.drop_index('scores_author_user_id_idx', table_name='scores')
    op.drop_index('scores_config_id_idx', table_name='scores')
    op.drop_index('scores_created_at_idx', table_name='scores')
    op.drop_index('scores_id_project_id_key', table_name='scores')
    op.drop_index('scores_observation_id_idx', table_name='scores', postgresql_using='hash')
    op.drop_index('scores_project_id_name_idx', table_name='scores')
    op.drop_index('scores_source_idx', table_name='scores')
    op.drop_index('scores_timestamp_idx', table_name='scores')
    op.drop_index('scores_trace_id_idx', table_name='scores', postgresql_using='hash')
    op.drop_index('scores_value_idx', table_name='scores')
    op.drop_table('scores')
    op.drop_index('prompt_dependencies_project_id_child_name', table_name='prompt_dependencies')
    op.drop_index('prompt_dependencies_project_id_parent_id', table_name='prompt_dependencies')
    op.drop_table('prompt_dependencies')
    op.drop_index('models_model_name_idx', table_name='models')
    op.drop_index('models_project_id_model_name_start_date_unit_key', table_name='models')
    op.drop_table('models')
    op.drop_index('annotation_queues_id_project_id_idx', table_name='annotation_queues')
    op.drop_index('annotation_queues_project_id_created_at_idx', table_name='annotation_queues')
    op.drop_index('annotation_queues_project_id_name_key', table_name='annotation_queues')
    op.drop_table('annotation_queues')
    op.drop_index('dataset_run_items_created_at_idx', table_name='dataset_run_items')
    op.drop_index('dataset_run_items_dataset_item_id_idx', table_name='dataset_run_items', postgresql_using='hash')
    op.drop_index('dataset_run_items_dataset_run_id_idx', table_name='dataset_run_items', postgresql_using='hash')
    op.drop_index('dataset_run_items_observation_id_idx', table_name='dataset_run_items', postgresql_using='hash')
    op.drop_index('dataset_run_items_trace_id_idx', table_name='dataset_run_items')
    op.drop_index('dataset_run_items_updated_at_idx', table_name='dataset_run_items')
    op.drop_table('dataset_run_items')
    op.drop_index('verification_tokens_identifier_token_key', table_name='verification_tokens')
    op.drop_index('verification_tokens_token_key', table_name='verification_tokens')
    op.drop_table('verification_tokens')
    op.drop_index('observation_media_project_id_observation_id_idx', table_name='observation_media')
    op.drop_index('observation_media_project_id_trace_id_observation_id_media__key', table_name='observation_media')
    op.drop_table('observation_media')
    op.drop_index('trace_sessions_created_at_idx', table_name='trace_sessions')
    op.drop_index('trace_sessions_project_id_idx', table_name='trace_sessions')
    op.drop_index('trace_sessions_updated_at_idx', table_name='trace_sessions')
    op.drop_table('trace_sessions')
    op.drop_index('job_configurations_project_id_id_idx', table_name='job_configurations')
    op.drop_table('job_configurations')
    op.drop_index('llm_schemas_project_id_name_key', table_name='llm_schemas')
    op.drop_table('llm_schemas')
    op.drop_index('audit_logs_api_key_id_idx', table_name='audit_logs')
    op.drop_index('audit_logs_created_at_idx', table_name='audit_logs')
    op.drop_index('audit_logs_org_id_idx', table_name='audit_logs')
    op.drop_index('audit_logs_project_id_idx', table_name='audit_logs')
    op.drop_index('audit_logs_updated_at_idx', table_name='audit_logs')
    op.drop_index('audit_logs_user_id_idx', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_table('organizations')
    op.drop_index('prompt_protected_labels_project_id_label_key', table_name='prompt_protected_labels')
    op.drop_table('prompt_protected_labels')
    op.drop_index('background_migrations_name_key', table_name='background_migrations')
    op.drop_table('background_migrations')
    op.drop_index('prices_model_id_usage_type_key', table_name='prices')
    op.drop_table('prices')
    op.drop_index('media_project_id_sha_256_hash_key', table_name='media')
    op.drop_table('media')
    op.drop_index('billing_meter_backups_stripe_customer_id_meter_id_start_tim_idx', table_name='billing_meter_backups')
    op.drop_index('billing_meter_backups_stripe_customer_id_meter_id_start_tim_key', table_name='billing_meter_backups')
    op.drop_table('billing_meter_backups')
    op.drop_table('sso_configs')
    op.drop_index('job_executions_created_at_idx', table_name='job_executions')
    op.drop_index('job_executions_job_configuration_id_idx', table_name='job_executions')
    op.drop_index('job_executions_job_input_trace_id_idx', table_name='job_executions')
    op.drop_index('job_executions_job_output_score_id_idx', table_name='job_executions')
    op.drop_index('job_executions_project_id_id_idx', table_name='job_executions')
    op.drop_index('job_executions_project_id_status_idx', table_name='job_executions')
    op.drop_index('job_executions_updated_at_idx', table_name='job_executions')
    op.drop_table('job_executions')
    op.drop_index('project_memberships_org_membership_id_idx', table_name='project_memberships')
    op.drop_index('project_memberships_project_id_idx', table_name='project_memberships')
    op.drop_index('project_memberships_user_id_idx', table_name='project_memberships')
    op.drop_table('project_memberships')
    op.drop_table('cron_jobs')
    op.drop_index('Session_session_token_key', table_name='Session')
    op.drop_table('Session')
    op.drop_index('llm_tools_project_id_name_key', table_name='llm_tools')
    op.drop_table('llm_tools')
    op.drop_index('eval_templates_project_id_id_idx', table_name='eval_templates')
    op.drop_index('eval_templates_project_id_name_version_key', table_name='eval_templates')
    op.drop_table('eval_templates')
    op.drop_index('score_configs_categories_idx', table_name='score_configs')
    op.drop_index('score_configs_created_at_idx', table_name='score_configs')
    op.drop_index('score_configs_data_type_idx', table_name='score_configs')
    op.drop_index('score_configs_id_project_id_key', table_name='score_configs')
    op.drop_index('score_configs_is_archived_idx', table_name='score_configs')
    op.drop_index('score_configs_project_id_idx', table_name='score_configs')
    op.drop_index('score_configs_updated_at_idx', table_name='score_configs')
    op.drop_table('score_configs')
    op.drop_index('datasets_created_at_idx', table_name='datasets')
    op.drop_index('datasets_project_id_name_key', table_name='datasets')
    op.drop_index('datasets_updated_at_idx', table_name='datasets')
    op.drop_table('datasets')
    op.drop_index('observations_created_at_idx', table_name='observations')
    op.drop_index('observations_id_project_id_key', table_name='observations')
    op.drop_index('observations_internal_model_idx', table_name='observations')
    op.drop_index('observations_model_idx', table_name='observations')
    op.drop_index('observations_project_id_internal_model_start_time_unit_idx', table_name='observations')
    op.drop_index('observations_project_id_prompt_id_idx', table_name='observations')
    op.drop_index('observations_project_id_start_time_type_idx', table_name='observations')
    op.drop_index('observations_prompt_id_idx', table_name='observations')
    op.drop_index('observations_start_time_idx', table_name='observations')
    op.drop_index('observations_trace_id_project_id_start_time_idx', table_name='observations')
    op.drop_index('observations_trace_id_project_id_type_start_time_idx', table_name='observations')
    op.drop_index('observations_type_idx', table_name='observations')
    op.drop_table('observations')
    op.drop_index('api_keys_fast_hashed_secret_key_idx', table_name='api_keys')
    op.drop_index('api_keys_fast_hashed_secret_key_key', table_name='api_keys')
    op.drop_index('api_keys_hashed_secret_key_idx', table_name='api_keys')
    op.drop_index('api_keys_hashed_secret_key_key', table_name='api_keys')
    op.drop_index('api_keys_id_key', table_name='api_keys')
    op.drop_index('api_keys_project_id_idx', table_name='api_keys')
    op.drop_index('api_keys_public_key_idx', table_name='api_keys')
    op.drop_index('api_keys_public_key_key', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index('dataset_runs_created_at_idx', table_name='dataset_runs')
    op.drop_index('dataset_runs_dataset_id_idx', table_name='dataset_runs', postgresql_using='hash')
    op.drop_index('dataset_runs_dataset_id_project_id_name_key', table_name='dataset_runs')
    op.drop_index('dataset_runs_updated_at_idx', table_name='dataset_runs')
    op.drop_table('dataset_runs')
    op.drop_table('_prisma_migrations')
    op.drop_index('annotation_queue_items_annotator_user_id_idx', table_name='annotation_queue_items')
    op.drop_index('annotation_queue_items_created_at_idx', table_name='annotation_queue_items')
    op.drop_index('annotation_queue_items_id_project_id_idx', table_name='annotation_queue_items')
    op.drop_index('annotation_queue_items_object_id_object_type_project_id_que_idx', table_name='annotation_queue_items')
    op.drop_index('annotation_queue_items_project_id_queue_id_status_idx', table_name='annotation_queue_items')
    op.drop_table('annotation_queue_items')
    op.add_column('users', sa.Column('surname', sa.String(), nullable=False))
    op.add_column('users', sa.Column('role', sa.String(), nullable=False))
    op.add_column('users', sa.Column('hashed_password', sa.String(), nullable=False))
    op.alter_column('users', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               nullable=False)
    op.alter_column('users', 'id',
               existing_type=sa.TEXT(),
               type_=sa.UUID(),
               existing_nullable=False)
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(precision=3),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index('users_email_key', table_name='users')
    op.create_unique_constraint(None, 'users', ['email'])
    op.drop_column('users', 'admin')
    op.drop_column('users', 'password')
    op.drop_column('users', 'feature_flags')
    op.drop_column('users', 'image')
    op.drop_column('users', 'email_verified')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('email_verified', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('image', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('feature_flags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('password', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('admin', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('users_email_key', 'users', ['email'], unique=True)
    op.alter_column('users', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(precision=3),
               existing_nullable=False,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('users', 'id',
               existing_type=sa.UUID(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('users', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('users', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               nullable=True)
    op.drop_column('users', 'hashed_password')
    op.drop_column('users', 'role')
    op.drop_column('users', 'surname')
    op.create_table('annotation_queue_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('queue_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('object_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('object_type', postgresql.ENUM('TRACE', 'OBSERVATION', name='AnnotationQueueObjectType'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'COMPLETED', name='AnnotationQueueStatus'), server_default=sa.text('\'PENDING\'::"AnnotationQueueStatus"'), autoincrement=False, nullable=False),
    sa.Column('locked_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('locked_by_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('annotator_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['annotator_user_id'], ['users.id'], name='annotation_queue_items_annotator_user_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['locked_by_user_id'], ['users.id'], name='annotation_queue_items_locked_by_user_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='annotation_queue_items_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['queue_id'], ['annotation_queues.id'], name='annotation_queue_items_queue_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='annotation_queue_items_pkey')
    )
    op.create_index('annotation_queue_items_project_id_queue_id_status_idx', 'annotation_queue_items', ['project_id', 'queue_id', 'status'], unique=False)
    op.create_index('annotation_queue_items_object_id_object_type_project_id_que_idx', 'annotation_queue_items', ['object_id', 'object_type', 'project_id', 'queue_id'], unique=False)
    op.create_index('annotation_queue_items_id_project_id_idx', 'annotation_queue_items', ['id', 'project_id'], unique=False)
    op.create_index('annotation_queue_items_created_at_idx', 'annotation_queue_items', ['created_at'], unique=False)
    op.create_index('annotation_queue_items_annotator_user_id_idx', 'annotation_queue_items', ['annotator_user_id'], unique=False)
    op.create_table('_prisma_migrations',
    sa.Column('id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('migration_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('logs', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rolled_back_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('applied_steps_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='_prisma_migrations_pkey')
    )
    op.create_table('dataset_runs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dataset_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dataset_id', 'project_id'], ['datasets.id', 'datasets.project_id'], name='dataset_runs_dataset_id_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'project_id', name='dataset_runs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('dataset_runs_updated_at_idx', 'dataset_runs', ['updated_at'], unique=False)
    op.create_index('dataset_runs_dataset_id_project_id_name_key', 'dataset_runs', ['dataset_id', 'project_id', 'name'], unique=True)
    op.create_index('dataset_runs_dataset_id_idx', 'dataset_runs', ['dataset_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_runs_created_at_idx', 'dataset_runs', ['created_at'], unique=False)
    op.create_table('api_keys',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('note', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('public_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('hashed_secret_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('display_secret_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_used_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('fast_hashed_secret_key', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='api_keys_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='api_keys_pkey')
    )
    op.create_index('api_keys_public_key_key', 'api_keys', ['public_key'], unique=True)
    op.create_index('api_keys_public_key_idx', 'api_keys', ['public_key'], unique=False)
    op.create_index('api_keys_project_id_idx', 'api_keys', ['project_id'], unique=False)
    op.create_index('api_keys_id_key', 'api_keys', ['id'], unique=True)
    op.create_index('api_keys_hashed_secret_key_key', 'api_keys', ['hashed_secret_key'], unique=True)
    op.create_index('api_keys_hashed_secret_key_idx', 'api_keys', ['hashed_secret_key'], unique=False)
    op.create_index('api_keys_fast_hashed_secret_key_key', 'api_keys', ['fast_hashed_secret_key'], unique=True)
    op.create_index('api_keys_fast_hashed_secret_key_idx', 'api_keys', ['fast_hashed_secret_key'], unique=False)
    op.create_table('observations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('start_time', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('parent_observation_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('SPAN', 'EVENT', 'GENERATION', name='ObservationType'), autoincrement=False, nullable=False),
    sa.Column('trace_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('model', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('modelParameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('input', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('level', postgresql.ENUM('DEBUG', 'DEFAULT', 'WARNING', 'ERROR', name='ObservationLevel'), server_default=sa.text('\'DEFAULT\'::"ObservationLevel"'), autoincrement=False, nullable=False),
    sa.Column('status_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('completion_start_time', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('completion_tokens', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('prompt_tokens', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('total_tokens', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('unit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('prompt_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('input_cost', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('output_cost', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('total_cost', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('internal_model', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('calculated_input_cost', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('calculated_output_cost', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('calculated_total_cost', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('internal_model_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='observations_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='observations_pkey')
    )
    op.create_index('observations_type_idx', 'observations', ['type'], unique=False)
    op.create_index('observations_trace_id_project_id_type_start_time_idx', 'observations', ['trace_id', 'project_id', 'type', 'start_time'], unique=False)
    op.create_index('observations_trace_id_project_id_start_time_idx', 'observations', ['trace_id', 'project_id', 'start_time'], unique=False)
    op.create_index('observations_start_time_idx', 'observations', ['start_time'], unique=False)
    op.create_index('observations_prompt_id_idx', 'observations', ['prompt_id'], unique=False)
    op.create_index('observations_project_id_start_time_type_idx', 'observations', ['project_id', 'start_time', 'type'], unique=False)
    op.create_index('observations_project_id_prompt_id_idx', 'observations', ['project_id', 'prompt_id'], unique=False)
    op.create_index('observations_project_id_internal_model_start_time_unit_idx', 'observations', ['project_id', 'internal_model', 'start_time', 'unit'], unique=False)
    op.create_index('observations_model_idx', 'observations', ['model'], unique=False)
    op.create_index('observations_internal_model_idx', 'observations', ['internal_model'], unique=False)
    op.create_index('observations_id_project_id_key', 'observations', ['id', 'project_id'], unique=True)
    op.create_index('observations_created_at_idx', 'observations', ['created_at'], unique=False)
    op.create_table('datasets',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='datasets_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'project_id', name='datasets_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('datasets_updated_at_idx', 'datasets', ['updated_at'], unique=False)
    op.create_index('datasets_project_id_name_key', 'datasets', ['project_id', 'name'], unique=True)
    op.create_index('datasets_created_at_idx', 'datasets', ['created_at'], unique=False)
    op.create_table('score_configs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data_type', postgresql.ENUM('CATEGORICAL', 'NUMERIC', 'BOOLEAN', name='ScoreDataType'), autoincrement=False, nullable=False),
    sa.Column('is_archived', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('min_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('max_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('categories', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='score_configs_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='score_configs_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('score_configs_updated_at_idx', 'score_configs', ['updated_at'], unique=False)
    op.create_index('score_configs_project_id_idx', 'score_configs', ['project_id'], unique=False)
    op.create_index('score_configs_is_archived_idx', 'score_configs', ['is_archived'], unique=False)
    op.create_index('score_configs_id_project_id_key', 'score_configs', ['id', 'project_id'], unique=True)
    op.create_index('score_configs_data_type_idx', 'score_configs', ['data_type'], unique=False)
    op.create_index('score_configs_created_at_idx', 'score_configs', ['created_at'], unique=False)
    op.create_index('score_configs_categories_idx', 'score_configs', ['categories'], unique=False)
    op.create_table('eval_templates',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('model_params', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('vars', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True),
    sa.Column('output_schema', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='eval_templates_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='eval_templates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('eval_templates_project_id_name_version_key', 'eval_templates', ['project_id', 'name', 'version'], unique=True)
    op.create_index('eval_templates_project_id_id_idx', 'eval_templates', ['project_id', 'id'], unique=False)
    op.create_table('llm_tools',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='llm_tools_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='llm_tools_pkey')
    )
    op.create_index('llm_tools_project_id_name_key', 'llm_tools', ['project_id', 'name'], unique=True)
    op.create_table('Session',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('session_token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='Session_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Session_pkey')
    )
    op.create_index('Session_session_token_key', 'Session', ['session_token'], unique=True)
    op.create_table('cron_jobs',
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_run', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_started_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('name', name='cron_jobs_pkey')
    )
    op.create_table('project_memberships',
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('org_membership_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', 'NONE', name='Role'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['org_membership_id'], ['organization_memberships.id'], name='project_memberships_org_membership_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='project_memberships_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='project_memberships_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', 'user_id', name='project_memberships_pkey')
    )
    op.create_index('project_memberships_user_id_idx', 'project_memberships', ['user_id'], unique=False)
    op.create_index('project_memberships_project_id_idx', 'project_memberships', ['project_id'], unique=False)
    op.create_index('project_memberships_org_membership_id_idx', 'project_memberships', ['org_membership_id'], unique=False)
    op.create_table('job_executions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('job_configuration_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('COMPLETED', 'ERROR', 'PENDING', 'CANCELLED', name='JobExecutionStatus'), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('end_time', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_input_trace_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_output_score_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_input_dataset_item_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('job_input_observation_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['job_configuration_id'], ['job_configurations.id'], name='job_executions_job_configuration_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='job_executions_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='job_executions_pkey')
    )
    op.create_index('job_executions_updated_at_idx', 'job_executions', ['updated_at'], unique=False)
    op.create_index('job_executions_project_id_status_idx', 'job_executions', ['project_id', 'status'], unique=False)
    op.create_index('job_executions_project_id_id_idx', 'job_executions', ['project_id', 'id'], unique=False)
    op.create_index('job_executions_job_output_score_id_idx', 'job_executions', ['job_output_score_id'], unique=False)
    op.create_index('job_executions_job_input_trace_id_idx', 'job_executions', ['job_input_trace_id'], unique=False)
    op.create_index('job_executions_job_configuration_id_idx', 'job_executions', ['job_configuration_id'], unique=False)
    op.create_index('job_executions_created_at_idx', 'job_executions', ['created_at'], unique=False)
    op.create_table('sso_configs',
    sa.Column('domain', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('auth_provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('auth_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('domain', name='sso_configs_pkey')
    )
    op.create_table('billing_meter_backups',
    sa.Column('stripe_customer_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('meter_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False),
    sa.Column('aggregated_value', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('org_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False)
    )
    op.create_index('billing_meter_backups_stripe_customer_id_meter_id_start_tim_key', 'billing_meter_backups', ['stripe_customer_id', 'meter_id', 'start_time', 'end_time'], unique=True)
    op.create_index('billing_meter_backups_stripe_customer_id_meter_id_start_tim_idx', 'billing_meter_backups', ['stripe_customer_id', 'meter_id', 'start_time', 'end_time'], unique=False)
    op.create_table('media',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('sha_256_hash', sa.CHAR(length=44), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('uploaded_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('upload_http_status', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('upload_http_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('bucket_path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('bucket_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('content_length', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='media_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='media_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('media_project_id_sha_256_hash_key', 'media', ['project_id', 'sha_256_hash'], unique=True)
    op.create_table('prices',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('usage_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('price', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['models.id'], name='prices_model_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='prices_pkey')
    )
    op.create_index('prices_model_id_usage_type_key', 'prices', ['model_id', 'usage_type'], unique=True)
    op.create_table('background_migrations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('script', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('args', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('failed_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('failed_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('worker_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('locked_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('state', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='background_migrations_pkey')
    )
    op.create_index('background_migrations_name_key', 'background_migrations', ['name'], unique=True)
    op.create_table('prompt_protected_labels',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('label', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='prompt_protected_labels_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='prompt_protected_labels_pkey')
    )
    op.create_index('prompt_protected_labels_project_id_label_key', 'prompt_protected_labels', ['project_id', 'label'], unique=True)
    op.create_table('organizations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('cloud_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='organizations_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('audit_logs',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('resource_type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('resource_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('action', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('before', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('after', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('org_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_org_role', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_project_role', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('api_key_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', postgresql.ENUM('USER', 'API_KEY', name='AuditLogRecordType'), server_default=sa.text('\'USER\'::"AuditLogRecordType"'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='audit_logs_pkey')
    )
    op.create_index('audit_logs_user_id_idx', 'audit_logs', ['user_id'], unique=False)
    op.create_index('audit_logs_updated_at_idx', 'audit_logs', ['updated_at'], unique=False)
    op.create_index('audit_logs_project_id_idx', 'audit_logs', ['project_id'], unique=False)
    op.create_index('audit_logs_org_id_idx', 'audit_logs', ['org_id'], unique=False)
    op.create_index('audit_logs_created_at_idx', 'audit_logs', ['created_at'], unique=False)
    op.create_index('audit_logs_api_key_id_idx', 'audit_logs', ['api_key_id'], unique=False)
    op.create_table('llm_schemas',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='llm_schemas_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='llm_schemas_pkey')
    )
    op.create_index('llm_schemas_project_id_name_key', 'llm_schemas', ['project_id', 'name'], unique=True)
    op.create_table('job_configurations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('job_type', postgresql.ENUM('EVAL', name='JobType'), autoincrement=False, nullable=False),
    sa.Column('eval_template_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('score_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('filter', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('target_object', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variable_mapping', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('sampling', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=False),
    sa.Column('delay', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', name='JobConfigState'), server_default=sa.text('\'ACTIVE\'::"JobConfigState"'), autoincrement=False, nullable=False),
    sa.Column('time_scope', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("ARRAY['NEW'::text]"), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['eval_template_id'], ['eval_templates.id'], name='job_configurations_eval_template_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='job_configurations_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='job_configurations_pkey')
    )
    op.create_index('job_configurations_project_id_id_idx', 'job_configurations', ['project_id', 'id'], unique=False)
    op.create_table('trace_sessions',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('bookmarked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('environment', sa.TEXT(), server_default=sa.text("'default'::text"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='trace_sessions_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'project_id', name='trace_sessions_pkey')
    )
    op.create_index('trace_sessions_updated_at_idx', 'trace_sessions', ['updated_at'], unique=False)
    op.create_index('trace_sessions_project_id_idx', 'trace_sessions', ['project_id'], unique=False)
    op.create_index('trace_sessions_created_at_idx', 'trace_sessions', ['created_at'], unique=False)
    op.create_table('observation_media',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('media_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('trace_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('observation_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], name='observation_media_media_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='observation_media_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='observation_media_pkey')
    )
    op.create_index('observation_media_project_id_trace_id_observation_id_media__key', 'observation_media', ['project_id', 'trace_id', 'observation_id', 'media_id', 'field'], unique=True)
    op.create_index('observation_media_project_id_observation_id_idx', 'observation_media', ['project_id', 'observation_id'], unique=False)
    op.create_table('verification_tokens',
    sa.Column('identifier', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('token', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=False)
    )
    op.create_index('verification_tokens_token_key', 'verification_tokens', ['token'], unique=True)
    op.create_index('verification_tokens_identifier_token_key', 'verification_tokens', ['identifier', 'token'], unique=True)
    op.create_table('dataset_run_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dataset_run_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('dataset_item_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('observation_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('trace_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dataset_item_id', 'project_id'], ['dataset_items.id', 'dataset_items.project_id'], name='dataset_run_items_dataset_item_id_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dataset_run_id', 'project_id'], ['dataset_runs.id', 'dataset_runs.project_id'], name='dataset_run_items_dataset_run_id_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'project_id', name='dataset_run_items_pkey')
    )
    op.create_index('dataset_run_items_updated_at_idx', 'dataset_run_items', ['updated_at'], unique=False)
    op.create_index('dataset_run_items_trace_id_idx', 'dataset_run_items', ['trace_id'], unique=False)
    op.create_index('dataset_run_items_observation_id_idx', 'dataset_run_items', ['observation_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_run_items_dataset_run_id_idx', 'dataset_run_items', ['dataset_run_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_run_items_dataset_item_id_idx', 'dataset_run_items', ['dataset_item_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_run_items_created_at_idx', 'dataset_run_items', ['created_at'], unique=False)
    op.create_table('annotation_queues',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('score_config_ids', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='annotation_queues_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='annotation_queues_pkey')
    )
    op.create_index('annotation_queues_project_id_name_key', 'annotation_queues', ['project_id', 'name'], unique=True)
    op.create_index('annotation_queues_project_id_created_at_idx', 'annotation_queues', ['project_id', 'created_at'], unique=False)
    op.create_index('annotation_queues_id_project_id_idx', 'annotation_queues', ['id', 'project_id'], unique=False)
    op.create_table('models',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('model_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('match_pattern', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('input_price', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('output_price', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('total_price', sa.NUMERIC(precision=65, scale=30), autoincrement=False, nullable=True),
    sa.Column('unit', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tokenizer_config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('tokenizer_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='models_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='models_pkey')
    )
    op.create_index('models_project_id_model_name_start_date_unit_key', 'models', ['project_id', 'model_name', 'start_date', 'unit'], unique=True)
    op.create_index('models_model_name_idx', 'models', ['model_name'], unique=False)
    op.create_table('prompt_dependencies',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('child_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('child_label', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('child_version', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['prompts.id'], name='prompt_dependencies_parent_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='prompt_dependencies_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='prompt_dependencies_pkey')
    )
    op.create_index('prompt_dependencies_project_id_parent_id', 'prompt_dependencies', ['project_id', 'parent_id'], unique=False)
    op.create_index('prompt_dependencies_project_id_child_name', 'prompt_dependencies', ['project_id', 'child_name'], unique=False)
    op.create_table('scores',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('observation_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trace_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('comment', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('source', postgresql.ENUM('ANNOTATION', 'API', 'EVAL', name='ScoreSource'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('config_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('data_type', postgresql.ENUM('CATEGORICAL', 'NUMERIC', 'BOOLEAN', name='ScoreDataType'), server_default=sa.text('\'NUMERIC\'::"ScoreDataType"'), autoincrement=False, nullable=False),
    sa.Column('string_value', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('queue_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['config_id'], ['score_configs.id'], name='scores_config_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='scores_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='scores_pkey')
    )
    op.create_index('scores_value_idx', 'scores', ['value'], unique=False)
    op.create_index('scores_trace_id_idx', 'scores', ['trace_id'], unique=False, postgresql_using='hash')
    op.create_index('scores_timestamp_idx', 'scores', ['timestamp'], unique=False)
    op.create_index('scores_source_idx', 'scores', ['source'], unique=False)
    op.create_index('scores_project_id_name_idx', 'scores', ['project_id', 'name'], unique=False)
    op.create_index('scores_observation_id_idx', 'scores', ['observation_id'], unique=False, postgresql_using='hash')
    op.create_index('scores_id_project_id_key', 'scores', ['id', 'project_id'], unique=True)
    op.create_index('scores_created_at_idx', 'scores', ['created_at'], unique=False)
    op.create_index('scores_config_id_idx', 'scores', ['config_id'], unique=False)
    op.create_index('scores_author_user_id_idx', 'scores', ['author_user_id'], unique=False)
    op.create_table('llm_api_keys',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('display_secret_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('secret_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('base_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('adapter', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('custom_models', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=False),
    sa.Column('with_default_models', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('extra_headers', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('extra_header_keys', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("'{}'::text[]"), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='llm_api_keys_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='llm_api_keys_pkey')
    )
    op.create_index('llm_api_keys_project_id_provider_key', 'llm_api_keys', ['project_id', 'provider'], unique=True)
    op.create_index('llm_api_keys_id_key', 'llm_api_keys', ['id'], unique=True)
    op.create_table('traces',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('external_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('release', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('public', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('bookmarked', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.Column('input', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('output', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='traces_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='traces_pkey')
    )
    op.create_index('traces_user_id_idx', 'traces', ['user_id'], unique=False)
    op.create_index('traces_timestamp_idx', 'traces', ['timestamp'], unique=False)
    op.create_index('traces_tags_idx', 'traces', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('traces_session_id_idx', 'traces', ['session_id'], unique=False)
    op.create_index('traces_project_id_timestamp_idx', 'traces', ['project_id', 'timestamp'], unique=False)
    op.create_index('traces_name_idx', 'traces', ['name'], unique=False)
    op.create_index('traces_id_user_id_idx', 'traces', ['id', 'user_id'], unique=False)
    op.create_index('traces_created_at_idx', 'traces', ['created_at'], unique=False)
    op.create_table('batch_exports',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('finished_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('query', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('format', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('log', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='batch_exports_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='batch_exports_pkey')
    )
    op.create_index('batch_exports_status_idx', 'batch_exports', ['status'], unique=False)
    op.create_index('batch_exports_project_id_user_id_idx', 'batch_exports', ['project_id', 'user_id'], unique=False)
    op.create_table('comments',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('object_type', postgresql.ENUM('TRACE', 'OBSERVATION', 'SESSION', 'PROMPT', name='CommentObjectType'), autoincrement=False, nullable=False),
    sa.Column('object_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('author_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='comments_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='comments_pkey')
    )
    op.create_index('comments_project_id_object_type_object_id_idx', 'comments', ['project_id', 'object_type', 'object_id'], unique=False)
    op.create_table('organization_memberships',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('org_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', 'NONE', name='Role'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], name='organization_memberships_org_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='organization_memberships_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='organization_memberships_pkey')
    )
    op.create_index('organization_memberships_user_id_idx', 'organization_memberships', ['user_id'], unique=False)
    op.create_index('organization_memberships_org_id_user_id_key', 'organization_memberships', ['org_id', 'user_id'], unique=True)
    op.create_table('Account',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('providerAccountId', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('token_type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('scope', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('session_state', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('expires_in', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ext_expires_in', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('refresh_token_expires_in', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='Account_user_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='Account_pkey')
    )
    op.create_index('Account_user_id_idx', 'Account', ['user_id'], unique=False)
    op.create_index('Account_provider_providerAccountId_key', 'Account', ['provider', 'providerAccountId'], unique=True)
    op.create_table('projects',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('org_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('deleted_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('retention_days', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], name='projects_org_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='projects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('projects_org_id_idx', 'projects', ['org_id'], unique=False)
    op.create_table('prompts',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('version', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('config', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('prompt', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('type', sa.TEXT(), server_default=sa.text("'text'::text"), autoincrement=False, nullable=False),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True),
    sa.Column('labels', postgresql.ARRAY(sa.TEXT()), server_default=sa.text('ARRAY[]::text[]'), autoincrement=False, nullable=True),
    sa.Column('commit_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='prompts_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='prompts_pkey')
    )
    op.create_index('prompts_updated_at_idx', 'prompts', ['updated_at'], unique=False)
    op.create_index('prompts_tags_idx', 'prompts', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('prompts_project_id_name_version_key', 'prompts', ['project_id', 'name', 'version'], unique=True)
    op.create_index('prompts_project_id_id_idx', 'prompts', ['project_id', 'id'], unique=False)
    op.create_index('prompts_created_at_idx', 'prompts', ['created_at'], unique=False)
    op.create_table('trace_media',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('media_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('trace_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('field', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['media_id'], ['media.id'], name='trace_media_media_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='trace_media_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='trace_media_pkey')
    )
    op.create_index('trace_media_project_id_trace_id_media_id_field_key', 'trace_media', ['project_id', 'trace_id', 'media_id', 'field'], unique=True)
    op.create_table('membership_invitations',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('invited_by_user_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('org_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('org_role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', 'NONE', name='Role'), autoincrement=False, nullable=False),
    sa.Column('project_role', postgresql.ENUM('OWNER', 'ADMIN', 'MEMBER', 'VIEWER', 'NONE', name='Role'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['invited_by_user_id'], ['users.id'], name='membership_invitations_invited_by_user_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['org_id'], ['organizations.id'], name='membership_invitations_org_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='membership_invitations_project_id_fkey', onupdate='CASCADE', ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name='membership_invitations_pkey')
    )
    op.create_index('membership_invitations_project_id_idx', 'membership_invitations', ['project_id'], unique=False)
    op.create_index('membership_invitations_org_id_idx', 'membership_invitations', ['org_id'], unique=False)
    op.create_index('membership_invitations_id_key', 'membership_invitations', ['id'], unique=True)
    op.create_index('membership_invitations_email_org_id_key', 'membership_invitations', ['email', 'org_id'], unique=True)
    op.create_index('membership_invitations_email_idx', 'membership_invitations', ['email'], unique=False)
    op.create_table('posthog_integrations',
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('encrypted_posthog_api_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('posthog_host_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='posthog_integrations_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', name='posthog_integrations_pkey')
    )
    op.create_table('blob_storage_integrations',
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('S3', 'S3_COMPATIBLE', 'AZURE_BLOB_STORAGE', name='BlobStorageIntegrationType'), autoincrement=False, nullable=False),
    sa.Column('bucket_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prefix', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('access_key_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('secret_access_key', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('region', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('force_path_style', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('next_sync_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('last_sync_at', postgresql.TIMESTAMP(precision=3), autoincrement=False, nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('export_frequency', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('file_type', postgresql.ENUM('JSON', 'CSV', 'JSONL', name='BlobStorageIntegrationFileType'), server_default=sa.text('\'CSV\'::"BlobStorageIntegrationFileType"'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name='blob_storage_integrations_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('project_id', name='blob_storage_integrations_pkey')
    )
    op.create_table('dataset_items',
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('input', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('expected_output', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('source_observation_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('dataset_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(precision=3), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'ARCHIVED', name='DatasetStatus'), server_default=sa.text('\'ACTIVE\'::"DatasetStatus"'), autoincrement=False, nullable=False),
    sa.Column('source_trace_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('project_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dataset_id', 'project_id'], ['datasets.id', 'datasets.project_id'], name='dataset_items_dataset_id_project_id_fkey', onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', 'project_id', name='dataset_items_pkey')
    )
    op.create_index('dataset_items_updated_at_idx', 'dataset_items', ['updated_at'], unique=False)
    op.create_index('dataset_items_source_trace_id_idx', 'dataset_items', ['source_trace_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_items_source_observation_id_idx', 'dataset_items', ['source_observation_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_items_dataset_id_idx', 'dataset_items', ['dataset_id'], unique=False, postgresql_using='hash')
    op.create_index('dataset_items_created_at_idx', 'dataset_items', ['created_at'], unique=False)
    op.drop_index(op.f('ix_memos_category'), table_name='memos')
    op.drop_table('memos')
    # ### end Alembic commands ###
